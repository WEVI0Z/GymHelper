unit ExsCreating;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Vcl.StdCtrls, Xml.xmldom, Xml.XMLIntf,
  Xml.XMLDoc, Vcl.Buttons;

type
  TCreateForm = class(TForm)
    IsWeightedCheck: TCheckBox;
    SaveButton: TButton;
    NameLabel: TLabel;
    DescriptionLabel: TLabel;
    Description: TEdit;
    NameOfTheTraining: TEdit;
    UsersXML: TXMLDocument;
    procedure SaveButtonClick(Sender: TObject);
  private
    { Private declarations }
  public
    { Public declarations }
  end;

var
  CreateForm: TCreateForm;

implementation

uses Authorization, MainMenu, Exercises, ExsEditing;
{$R *.dfm}

procedure ParseToXML(XMLDoc: TXMLDocument);
var
  i, j: Integer;
  currentUser: IXMLNode;
  currentExs: IXMLNode;

begin
  XMLDoc.LoadFromFile('users.xml');
  XMLDoc.Active := True;
  XMLDoc.XML.Clear;
  XMLDoc.XML.Add('<main>');
  XMLDoc.XML.Add('</main>');
  XMLDoc.Active := True;

  for i := 0 to length(users) - 1 do
  begin
    XMLDoc.DocumentElement.AddChild('user');
    currentUser := XMLDoc.DocumentElement.ChildNodes.Last;

    currentUser.AddChild('username');
    currentUser.AddChild('password');
    currentUser.AddChild('exercises');

    currentUser.ChildNodes['username'].Text := users[i].Name;
    currentUser.ChildNodes['password'].Text := users[i].Password;

    for j := 0 to length(users[i].Exercises) - 1 do
    begin
      currentUser.ChildNodes['exercises'].AddChild('exercise');
      currentExs := currentUser.ChildNodes['exercises'].ChildNodes.Last;

      currentExs.AddChild('name');
      currentExs.AddChild('description');
      currentExs.AddChild('isweighted');

      currentExs.ChildNodes['name'].Text := users[i].Exercises[j].Name;
      currentExs.ChildNodes['description'].Text := users[i].Exercises[j].Description;

      if users[i].Exercises[j].IsWeighted = True then
        currentExs.ChildNodes['isweighted'].Text := 'True'
      else
        currentExs.ChildNodes['isweighted'].Text := 'False';
    end;
  end;

  XMLDoc.SaveToFile('users.xml');
end;

procedure DrawTheList();

var i: Integer;

begin
  setLength(labels, length(users[UserID].Exercises));
  setLength(buttons, length(users[UserID].Exercises));

  for i := 0 to length(users[UserID].Exercises - 1 do
  begin
    labels[i] := TLabel.Create(Actions);
    labels[i].Parent := Actions;
    labels[i].Top := 40 * (i + 1);
    labels[i].Left := 20;
    labels[i].Caption := users[UserID].Exercises[i].Name;
    labels[i].Width := 200;
    labels[i].Height := 30;

    buttons[i] := TSpeedButton.Create(Actions);
    buttons[i].Parent := Actions;
    buttons[i].Top := 40 * (i + 1);
    buttons[i].Left := 230;
    buttons[i].Caption := '>';
    buttons[i].Width := 30;
    buttons[i].Height := 30;
  end;
end;

procedure TCreateForm.SaveButtonClick(Sender: TObject);
  var xml: string;

begin
  setLength(users[UserID].Exercises, length(users[UserID].Exercises) + 1);

  users[UserID].Exercises[length(users[UserID].Exercises) - 1].Name := NameOfTheTraining.Text;
  users[UserID].Exercises[length(users[UserID].Exercises) - 1].Description := Description.Text;
  users[UserID].Exercises[length(users[UserID].Exercises) - 1].IsWeighted := IsWeightedCheck.Checked;

  parseToXML(usersXML);

  DrawTheList();

//  ExsEditing.EditForm.Close;

end;

end.
